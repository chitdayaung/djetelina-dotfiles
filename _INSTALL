#!/bin/bash

####################
# HELPER VARIABLES #
####################
# Find out where install is located - source directory for everything we need
current_dir=$(pwd)
script_dir=$(dirname "$0")
if [ "$script_dir" = '.' ]; then script_dir="$current_dir"; fi

# Colors
CLEAR='\033[0m'
GREEN='\033[00;32m'
LIGHTGRAY='\033[00;37m'
BLUE='\033[00;34m'
# RED='\033[0;31m'

####################
# HELPER FUNCTIONS #
####################
function greydot() {
    printf "%s.%s" "$LIGHTGRAY" "$CLEAR"
}

function ok_installed() {
    printf "\n%s%s has been installed%s\n" "$GREEN" "$1" "$CLEAR"
}

printf "%sLaunching install from '%s'%s" "$BLUE" "$script_dir" "$CLEAR"

########################
# INSTALL NEEDED STUFF #
########################
# apt section
needed_packages=(python2.7 flake8 shellcheck) 

printf "\n\n%sChecking for required apt packages%s\n" "$BLUE" "$CLEAR"
for package in "${needed_packages[@]}"; do
    if [ $(dpkg-query -W -f='${Status}' "$package" 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
        printf "\n%s%s required%s\n" "$BLUE" "$package" "$CLEAR"
        sudo apt-get install "$package"
    else
        greydot
    fi
done

# pip install section
# vim sources powerline form 2.7 - todo i guess?
pip2_packages=(powerline-status bashate)
default_pip_packages=(python-jenkins pydocstyle)

printf "\n\n%sInstalling things from pip%s\n" "$BLUE" "$CLEAR"
for package in "${pip2_packages[@]}"; do
    pip2 -q -q -q install --user "${package}"
    greydot
done

for package in "${default_pip_packages[@]}"; do
    pip -q -q -q install --user "${package}"
    greydot
done

# plugins from git
printf "\n\n%sChecking for various plugins from git%s\n" "$BLUE" "$CLEAR"

## VIM
# pathogen
if [ ! -f "$HOME/.vim/autoload/pathogen.vim" ]; then
    mkdir -p ~/.vim/autoload ~/.vim/bundle && curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
    ok_installed vim-pathogen
else
    greydot
fi

# Syntastic
if [ ! -d "$HOME/.vim/bundle/syntastic" ]; then
    cd ~/.vim/bundle && git clone --depth=1 https://github.com/vim-syntastic/syntastic.git
    ok_installed syntastic
else
    greydot
fi

# jedi
if [ ! -d "$HOME/.vim/bundle/jedi-vim" ]; then
    cd ~/.vim/bundle/ && git clone --recursive https://github.com/davidhalter/jedi-vim.git
    ok_installed vim-jedi
else
    greydot
fi


## ZSH
# oh-my-zsh
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    ok_installed oh-my-zsh
else
    greydot
fi

# k, better, git-aware version of ls
if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/k" ]; then
        git clone https://github.com/supercrabtree/k "$HOME/.oh-my-zsh/custom/plugins/k"
        ok_installed k
else
    greydot
fi

# syntax highlighting
if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting" ]; then
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
        ok-installed zsh-syntax-highlighting
else
        greydot
fi

#####################################
# COPY ALL .FILES TO HOME DIRECTORY #
#####################################
home_files=(zshrc bash_aliases zsh_aliases vimrc)

for dotfile in "${home_files[@]}"; do
        ln -sf "$script_dir/$dotfile" "$HOME/.$dotfile"
done

printf "\n\n%sAll done!%s\n" "$BLUE" "$CLEAR"
